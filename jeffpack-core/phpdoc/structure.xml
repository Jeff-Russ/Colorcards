<?xml version="1.0" encoding="utf-8"?>
<project title="API Documentation" version="2.9.0">
  <partials/>
  <file path="phpdoc/ajax_search.php" generated-path="phpdoc.ajax_search.html" hash="e693b887d537750ce5893e956a54d607" package="Search">
    <docblock line="0">
      <description>phpDocumentor</description>
      <long-description>PHP Version 5</long-description>
      <tag name="category" line="0" description="phpDocumentor"/>
      <tag name="package" line="0" description="Search"/>
      <tag name="author" line="0" description="Mike van Riel" link="mailto:mike.vanriel@naenius.com"/>
      <tag name="copyright" line="0" description="2010-2011 Mike van Riel / Naenius (http://www.naenius.com)"/>
      <tag name="license" line="0" description="MIT" link="http://www.opensource.org/licenses/mit-license.php"/>
      <tag name="link" line="0" description="http://phpdoc.org" link="http://phpdoc.org"/>
    </docblock>
    <source>eJyNkmtP2zAUhr/nVxxVleJUJIFJ+8KlYwwGbLR00DG2qkJeYhKviZ3aTkuG+O87dkNBGxKzoijn8rw+l+y+q/LKi3s9D3qAn4cyqUsmjFTosL7RyQiumNJcCnjb+vYTalgmVQP/ILBf0WRGMwYAl4yqJHdOWptcKvTBgM8YLKiAC84K2C3RjNBUaO0LygSvdZTIsr+6R1aN4llu4M3m1maIr62/BGIYriAguTHVdhwvl8vomVDghAqeMKFtUc+yZIU+WauERVJlcZuj45KbsDUi7A8Gp+NWRMzAnVYEg6lMLIzx2PPiGDJmQLu+wTBVel37hj3QRhlZyCVTpHtzfDSe+DbgT4Mdh91ykToAuIDrwRmk7VC97l1ZIC/YEg7PB4+zJsjZSNgvJE2Jv7ryBlXYXYR+38UravIn9nqEJrGUvbQ7x/XtwSop7M9rphri2eY6cbygRc0miRSGcqGJUVToAndOog3w3x98ODz6eHxy+unz2WB4PvpycTn+evXt+vsPfwM6TiKCjk9/Jim7zXL+a1aUQlZzpU29WN41v/0AVdxg/GAaR1HHs9UqpuvCaKyJKkUb4ibTw7EvqLLlHxXMdg5d1n7gxG+lYhRHTVw3VK+DAdy7Qp4EZDmUKTvjGhVce2AFbM6jiWdvLRD2cZPtlfqgGdNsSEtGfJdrp+tInkJ7Xid5usZMU7H/xWzuGmxnNJki6N9Dx1XT2cZp48hpmuKSdM40WbUU9rlhJdkMwr7A3q+sL2j343dwVzx9ieXpq6At6iXU+l+EHQgP/o734HksySX4EwvzsiowieCfg89jfy59isl/ACqIaJw=</source>
  </file>
  <file path="wp_classes/SettingsHelper.php" generated-path="wp_classes.SettingsHelper.html" hash="0c85fb212422fe7b07dd55ee65f61c5f" package="JeffPack\WordPress Classes">
    <docblock line="0">
      <description>SettingsHelper helps maintain a plugin options page as well as access options
values in your WordPress Plugin. It makes heavy use of the PersistArgs class
which it extends.</description>
      <long-description></long-description>
      <tag name="package" line="0" description="JeffPack"/>
      <tag name="subpackage" line="0" description="WordPress Classes"/>
      <tag name="access" line="0" description="public"/>
      <tag name="author" line="0" description="Jeff Russ"/>
      <tag name="copyright" line="0" description="2016 Jeff Russ"/>
      <tag name="license" line="0" description="GPL-2.0"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="43" package="JeffPack">
      <extends>\PluginData</extends>
      <name>SettingsHelper</name>
      <full_name>\SettingsHelper</full_name>
      <docblock line="43">
        <description>SettingsHelper class is a collection of methods to help maintain a plugin
options page as well as access options values in your WordPress Plugin.</description>
        <long-description>It makes heavy use of the PersistArgs class which it extends.

Most options are chainable, using  the variable data from the previous call
in the next. For example, you call

$plug-&gt;addSettingsPage()-&gt;addSettingsSection()-&gt;addSetting("Your Name");

The section is added to the page you just made, not some previously made one,
and the setting is added to the section you just made. Even if you don't chain
the above would work since it's in logical order but if it's not the last
argument is passed by reference and written to for future use in what would
be the next logical method call. For example:

$plug-&gt;addSettingsPage('menu' "on sidebar", null, $menu_def_section);
$plug-&gt;addSettingsPage('options' "in tools", null, $tools_def_section);

$menu_my_section = $menu_def_section;

$plug-&gt;addSettingsSection('my section', $menu_my_section);

$plug-&gt;addSetting('setting1', '', '', $menu_def_section );
$plug-&gt;addSetting('setting2', '', '', $menu_my_section );
$plug-&gt;addSetting('setting3', '', '', $tools_def_section);</long-description>
        <tag name="package" line="43" description="JeffPack"/>
        <tag name="inherited_from" description="\PluginData" refers="\PluginData" link="/classes/PluginData.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="" line="38" package="JeffPack">
        <name>$info</name>
        <full_name>\PluginData::info</full_name>
        <default>array()</default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="38" description="&lt;p&gt;holding plugin, WordPress, PHP and server data&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="41" package="JeffPack">
        <name>$logs</name>
        <full_name>\PluginData::logs</full_name>
        <default>array()</default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;to be populated with log info for output to the admin panel, file, etc.&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="39" package="JeffPack">
        <name>$args</name>
        <full_name>\PersistArgs::args</full_name>
        <default>array()</default>
        <docblock line="39">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="39" description="&lt;p&gt;olds whatever variables are needed between calls&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="61" package="JeffPack">
        <name>addSettingsPage</name>
        <full_name>\SettingsHelper::addSettingsPage()</full_name>
        <docblock line="61">
          <description>Calls add_menu_page(), add_options_page(), or add_submenu_page() with a built in
Closure that calls settings_fields(), do_settings_sections() submit_button()</description>
          <long-description></long-description>
          <tag name="param" line="61" description="&lt;p&gt;&quot;menu&quot; calls add_menu_page,&#10;&quot;options&quot; calls add_options_page anything else calls add_submenu_page&#10;and is passed as first arg&lt;/p&gt;" type="string" variable="$menu_location">
            <type>string</type>
          </tag>
          <tag name="param" line="61" description="&lt;p&gt;first arg sent to&#10;add_options_page/add_submenu_page or second arg send to add_submenu_page&lt;/p&gt;" type="string" variable="$page_title">
            <type>string</type>
          </tag>
          <tag name="param" line="61" description="&lt;p&gt;second arg sent to&#10;add_options_page/add_submenu_page or third arg send to add_submenu_page&lt;/p&gt;" type="string" variable="$menu_title">
            <type>string</type>
          </tag>
          <tag name="param" line="61" description="&lt;p&gt;can have 'icon_url' or 'position' elements added&#10;and after call will have page and default section info added.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="61" description="returns reference to object to enable method call chaining" type="\SettingsHelper">
            <type>\SettingsHelper</type>
          </tag>
          <tag name="access" line="61" description="public"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$menu_location</name>
          <default>"menu"</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$page_title</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$menu_title</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$args</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="173" package="JeffPack">
        <name>addSettingsSection</name>
        <full_name>\SettingsHelper::addSettingsSection()</full_name>
        <docblock line="173">
          <description>Calls add_action("admin_init",function(){add_settings_section(.</description>
          <long-description>..function(){...});</long-description>
          <tag name="param" line="173" description="&lt;p&gt;(optional, defaulting to '')&lt;/p&gt;" type="string" variable="$section_title">
            <type>string</type>
          </tag>
          <tag name="param" line="173" description="&lt;p&gt;if provided should have 'page_slug'. after call it will have&#10;section info added.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="173" description="returns reference to object to enable method call chaining" type="\SettingsHelper">
            <type>\SettingsHelper</type>
          </tag>
          <tag name="access" line="173" description="public"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$section_title</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$args</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="226" package="JeffPack">
        <name>addSetting</name>
        <full_name>\SettingsHelper::addSetting()</full_name>
        <docblock line="226">
          <description>Calls add_action("admin_init",function(){add_settings_section(.</description>
          <long-description>..function(){...});</long-description>
          <tag name="param" line="226" description="" type="string" variable="$setting_label">
            <type>string</type>
          </tag>
          <tag name="param" line="226" description="&lt;p&gt;is the default value the setting should have&lt;/p&gt;" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="param" line="226" description="&lt;p&gt;if provided should be a string of html or a callback.&#10;If not provided, a text field will be created.&#10;If you provide a string use single quotes and embed $name and $value.&#10;If you use a callback, do function($args) { extract($args); ...}&lt;/p&gt;" type="mixed" variable="$source">
            <type>mixed</type>
          </tag>
          <tag name="param" line="226" description="&lt;p&gt;if provided should have 'page_slug' and section info.&#10;after call it will have setting info added.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="226" description="returns reference to object to enable method call chaining" type="\SettingsHelper">
            <type>\SettingsHelper</type>
          </tag>
          <tag name="access" line="226" description="public"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting_label</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>''</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default>''</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$args</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="284" package="JeffPack">
        <name>getSetting</name>
        <full_name>\SettingsHelper::getSetting()</full_name>
        <docblock line="284">
          <description>public function getSetting($setting_id)
{
	extract( $this-&gt;info['settings'][$setting_id] );
	$options = wp_parse_args(get_option($option_name), [$setting_id =&gt; $default] );
	return $options[$setting_id];
}</description>
          <long-description></long-description>
          <tag name="param" line="284" description="" type="string" variable="$setting_id">
            <type>string</type>
          </tag>
          <tag name="return" line="284" description="returns value of setting" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="284" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting_id</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="55" package="JeffPack">
        <name>__construct</name>
        <full_name>\PluginData::__construct()</full_name>
        <docblock line="55">
          <description>Calls enforceVersions() and setInfo().</description>
          <long-description></long-description>
          <tag name="param" line="55" description="&lt;p&gt;sets $this-&gt;['min_php'] or '4.4.0' if not provided&lt;/p&gt;" type="string" variable="$min_php">
            <type>string</type>
          </tag>
          <tag name="param" line="55" description="&lt;p&gt;sets $this-&gt;['min_wp'] or '5.3.0' if not provided&lt;/p&gt;" type="string" variable="$min_wp">
            <type>string</type>
          </tag>
          <tag name="param" line="55" description="&lt;p&gt;should be &lt;strong&gt;FILE&lt;/strong&gt; from main php file and&#10;is determined via debug_backtrace()[0]['file'] if not provided. It is used&#10;to set $this-&gt;info['plugin_file']&lt;/p&gt;" type="string" variable="$plugin_file">
            <type>string</type>
          </tag>
          <tag name="access" line="55" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$min_php</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$min_wp</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$plugin_file</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\PluginData</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="79" package="JeffPack">
        <name>enforceVersions</name>
        <full_name>\PluginData::enforceVersions()</full_name>
        <docblock line="79">
          <description>Calls wp_die if minimum WordPress or PHP version are not met.</description>
          <long-description></long-description>
          <tag name="param" line="79" description="&lt;p&gt;resets $this-&gt;['min_php'] only if provided&lt;/p&gt;" type="string" variable="$min_php">
            <type>string</type>
          </tag>
          <tag name="param" line="79" description="&lt;p&gt;resets $this-&gt;['min_wp'] only if provided&lt;/p&gt;" type="string" variable="$min_wp">
            <type>string</type>
          </tag>
          <tag name="param" line="79" description="&lt;p&gt;resets $this-&gt;['plugin_file'] only if provided&lt;/p&gt;" type="string" variable="$plugin_file">
            <type>string</type>
          </tag>
          <tag name="access" line="79" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$min_php</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$min_wp</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$plugin_file</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\PluginData</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="122" package="JeffPack">
        <name>setInfo</name>
        <full_name>\PluginData::setInfo()</full_name>
        <docblock line="122">
          <description>Sets a miriad of keys on $this-&gt;info - 'plugin_name', 'plugin_uri',
'plugin_version', 'plugin_description', 'plugin_author',
'plugin_author_uri', 'plugin_text_domain', 'plugin_domain_path',
'plugin_network', 'plugin_title', 'plugin_author_name',
'plugin_author_name', 'plugin_basename', 'plugin_path',
'plugin_slug', 'plugin_prefix', 'plugin_url', 'server_ip',
and, if provided as arguments, 'min_php', 'min_wp' and 'plugin_file'</description>
          <long-description></long-description>
          <tag name="param" line="122" description="&lt;p&gt;resets $this-&gt;['min_php'] only if provided&lt;/p&gt;" type="string" variable="$min_php">
            <type>string</type>
          </tag>
          <tag name="param" line="122" description="&lt;p&gt;resets $this-&gt;['min_wp'] only if provided&lt;/p&gt;" type="string" variable="$min_wp">
            <type>string</type>
          </tag>
          <tag name="param" line="122" description="&lt;p&gt;resets $this-&gt;['plugin_file'] only if provided&lt;/p&gt;" type="string" variable="$plugin_file">
            <type>string</type>
          </tag>
          <tag name="access" line="122" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$min_php</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$min_wp</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$plugin_file</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\PluginData</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="157" package="JeffPack">
        <name>getServerIP</name>
        <full_name>\PluginData::getServerIP()</full_name>
        <docblock line="157">
          <description>returns the numeric IP (as string) from which the WordPress  site
is being served. This is helpful in differing behavior when on localhost.</description>
          <long-description></long-description>
          <tag name="access" line="157" description="public"/>
        </docblock>
        <inherited_from>\PluginData</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="184" package="JeffPack">
        <name>viewGLOBALS</name>
        <full_name>\PluginData::viewGLOBALS()</full_name>
        <docblock line="184">
          <description>returns a large string displaying the contents of the $GLOBALS
array</description>
          <long-description></long-description>
          <tag name="return" line="184" description="representing contents of the $GLOBALS array" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="184" description="public"/>
        </docblock>
        <inherited_from>\PluginData</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="214" package="JeffPack">
        <name>writeLogs</name>
        <full_name>\PluginData::writeLogs()</full_name>
        <docblock line="214">
          <description>Saves viewGLOBALS to $this-&gt;logs['GLOBALS']</description>
          <long-description></long-description>
          <tag name="return" line="214" description="representing contents of the $GLOBALS array" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="214" description="public"/>
        </docblock>
        <inherited_from>\PluginData</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="59" package="JeffPack">
        <name>getArg</name>
        <full_name>\PersistArgs::getArg()</full_name>
        <docblock line="59">
          <description>Get a single value from $args or $this-&gt;args without writing to either.</description>
          <long-description>If $args is an array, the $key is looked up and the value is returned.
If $args is a single value, that value is returned.
If $args is null or the key does not exist, $this-&gt;args[$key] is returned
without first checking if the key exists.

An error will be thrown if the $key is not found or therefore this method is
useful if you need to halt things when the value can't be found.</long-description>
          <tag name="param" line="59" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="59" description="&lt;p&gt;is existing or hypothetical array key&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="59" description="$args[$key], $this-&gt;args[$key], or just $args" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="59" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="95" package="JeffPack">
        <name>getPassedArg</name>
        <full_name>\PersistArgs::getPassedArg()</full_name>
        <docblock line="95">
          <description>Get a single value from $args only (not checking $this-&gt;args) and without
writing to either.</description>
          <long-description>This method is useful when you create a method which needs a value to be
set in that call without falling back on data from a previous call.

If $args is an array, the $key is looked up and the value is returned.
If $args is a single value, that value is returned.
If $args is null or the key does not exist, null or some other value is
return, which can be set by the optional third argument.</long-description>
          <tag name="param" line="95" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="95" description="&lt;p&gt;is existing or hypothetical array key&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="95" description="&lt;p&gt;(optional) return if value can't be found (defaults to null)&lt;/p&gt;" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="95" description="$args[$key] or $defaults" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="95" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="132" package="JeffPack">
        <name>toArrayAsKey</name>
        <full_name>\PersistArgs::toArrayAsKey()</full_name>
        <docblock line="132">
          <description>This static method is useful for intializing an array from an unknown
variable. It does not modify the object or it's arguments and is use
only for it's return usually to assign to an array variable.</description>
          <long-description>A new array is returned from the contents of $args which
could be an array itself, a single value or null. The second argument
defines a key to be created if a value not associated with a string
key is found. The return is always an array.

If $args is null an empty array is return and $key is not used.
If $args is not an array and not null, that value is added to a new
array at $key and the array is return.
If $args is an array lacking $key but has a value at $args[0],
that value is moved to $args[$key] and $args[0] is deleted.
If $args is an array but there is no $args[0], it's returned as is.</long-description>
          <tag name="param" line="132" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="132" description="&lt;p&gt;is a hypothetical array key, usually a string&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="132" description="a new array or a copy of $args if it it an array." type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="132" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="169" package="JeffPack">
        <name>getArgAndSync</name>
        <full_name>\PersistArgs::getArgAndSync()</full_name>
        <docblock line="169">
          <description>This method gets a desired value from either the $args parameter or
$this-&gt;args and synchronizes them as a side effect.</description>
          <long-description>This method modifies both $this-&gt;args and $args to mirror each other
and return a desired value from either of them or a default value if
not found (defaults to null). $key must be provided to determine which
element is to be returned

If $args anything not an array but not null, it's assigned to both
$args at $key and returned.

If $args is an array it's merged in both directions with $this-&gt;args
overriding any matching keys found in $this-&gt;args. If $key is found
in either, it's value is returned, or else $default is returned.</long-description>
          <tag name="param" line="169" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="169" description="&lt;p&gt;is a hypothetical array key, usually a string&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="169" description="&lt;p&gt;(optional) return if value can't be found (defaults to null)&lt;/p&gt;" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="169" description="the value finally residing in args[$key] or $default" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="169" description="protected"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="221" package="JeffPack">
        <name>mergeArgs</name>
        <full_name>\PersistArgs::mergeArgs()</full_name>
        <docblock line="221">
          <description>This method updates $this-&gt;args from the argument values and returns
it even if no change occured. It does not modify either argument so
if you'd like to synchronize them you should use this method's return
to re-assign the local variable(s) you passed in. There are three modes
you can use this method depending on the type and presence of the
second argument.</description>
          <long-description>SIMPLE MERGE MODE:

If $arg1 or $arg2 is provided as an array and the other is null,
it is merged into $this-&gt;args overriding any matching keys in
$this-&gt;args.

KEY MODE:

When you are uncertain that the first argument is an array you should
provide a key as the second argument which will be used to assign
the value of $arg1 to $this-&gt;args.

If $arg1 is non-null and not an array it will be added to $this-&gt;args
at using $arg2 as a key or or pushed to the end of the $this-&gt;args
at a new int index if $arg2 is not usable as a key.

TWO ARRAY MERGE MODE:

When you are certain $arg1 is either an array or null you can either leave
off the second argument or provide a second array where both will be merged
into $this-args.

If both arguments are provided and are arrays they are combined,
with $arg2 overriding any matching keys in $arg1, then this is merged
into $this-&gt;args overriding any matching keys in $this-&gt;args.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;expected to be array or non-null value&lt;/p&gt;" type="mixed" variable="$arg1">
            <type>mixed</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;expected to be array or key (but optional)&lt;/p&gt;" type="mixed" variable="$arg2">
            <type>mixed</type>
          </tag>
          <tag name="return" line="221" description="$this-&gt;args" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="221" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$arg1</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$arg2</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="25" package="JeffPack">
        <name>bool2str</name>
        <full_name>\HelperModule::bool2str()</full_name>
        <docblock line="25">
          <description>This static method for displaying booleans as strings</description>
          <long-description></long-description>
          <tag name="param" line="25" description="&lt;p&gt;a boolean variable&lt;/p&gt;" type="boolean" variable="$boolean">
            <type>boolean</type>
          </tag>
          <tag name="return" line="25" description="either 'true' or 'false'" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="25" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$boolean</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="35" package="JeffPack">
        <name>octal2str</name>
        <full_name>\HelperModule::octal2str()</full_name>
        <docblock line="35">
          <description>This static method for displaying octal number without converting</description>
          <long-description></long-description>
          <tag name="param" line="35" description="&lt;p&gt;an octal number&lt;/p&gt;" type="integer" variable="$octal_num">
            <type>integer</type>
          </tag>
          <tag name="return" line="35" description="representing decimal number" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="35" description="public&#10;example"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$octal_num</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="44" package="JeffPack">
        <name>strAfterBslash</name>
        <full_name>\HelperModule::strAfterBslash()</full_name>
        <docblock line="44">
          <description>This static method to get string after final backslash (/)</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;typically a local path or uri&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="return" line="44" description="portion after final backslash (/)" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="44" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="53" package="JeffPack">
        <name>arrayToString</name>
        <full_name>\HelperModule::arrayToString()</full_name>
        <docblock line="53">
          <description>This static method that captures var_dump of array as string, trims the fat and returns string</description>
          <long-description></long-description>
          <tag name="param" line="53" description="" type="array" variable="$array">
            <type>array</type>
          </tag>
          <tag name="return" line="53" description="representing array" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="53" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="80" package="JeffPack">
        <name>toSnakeCase</name>
        <full_name>\HelperModule::toSnakeCase()</full_name>
        <docblock line="80">
          <description>This static method converts a string (path or file) to a snake_case string
by
1. removing ".php"
2. replacing  spaces, dashes dots and backslashes with underscores
3. removing all other non-alphanumeric other than 'underscores
4. converting to all apha characters to lower-case
5. if the first character(s) is a number it's removed</description>
          <long-description></long-description>
          <tag name="param" line="80" description="&lt;p&gt;example: &quot;dir/my-plugin.php&quot;&lt;/p&gt;" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="80" description="&quot;dir/my-plugin.php&quot; would return: &quot;dir_my_plugin&quot;" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="80" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="98" package="JeffPack">
        <name>isClosure</name>
        <full_name>\HelperModule::isClosure()</full_name>
        <docblock line="98">
          <description>This static method determines if argument is an Closure object</description>
          <long-description></long-description>
          <tag name="param" line="98" description="&lt;p&gt;of any type&lt;/p&gt;" type="mixed" variable="$var">
            <type>mixed</type>
          </tag>
          <tag name="return" line="98" description="true if $var is a Closure object" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="98" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$var</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="111" package="JeffPack">
        <name>wpHomePath</name>
        <full_name>\HelperModule::wpHomePath()</full_name>
        <docblock line="111">
          <description>This static method take no arguments and
returns full path of WordPress home path.</description>
          <long-description>Use when get_home_path() might not be available.
MUST be called from somewhere inside /wp-content</long-description>
          <tag name="return" line="111" description="home path of WordPress installation" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="111" description="public"/>
        </docblock>
        <inherited_from>\HelperModule</inherited_from>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="wp_classes/PluginData.php" generated-path="wp_classes.PluginData.html" hash="92d88f8c89e30cda4408388157d7896d" package="JeffPack\WordPress Classes">
    <docblock line="0">
      <description>PluginData is a set of methods which which gather all information needed by
a plugin and stores them to $this-&gt;info, an array. It also has a $this-&gt;logs,
also an array, which can be populated with information to be output to the
admin panel or a file, etc and can be used to enforce minimum PHP and
WordPress versions.</description>
      <long-description>Since the plugin's identity is typically determined via the file being
exectuted, this class must be constructed ($ob = new Whatever(); ) from the
main php file (the one detailing the plugin information via the comment
header).</long-description>
      <tag name="package" line="0" description="JeffPack"/>
      <tag name="subpackage" line="0" description="WordPress Classes"/>
      <tag name="access" line="0" description="public"/>
      <tag name="author" line="0" description="Jeff Russ"/>
      <tag name="copyright" line="0" description="2016 Jeff Russ"/>
      <tag name="license" line="0" description="GPL-2.0"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="33" package="JeffPack">
      <extends>\PersistArgs</extends>
      <name>PluginData</name>
      <full_name>\PluginData</full_name>
      <docblock line="33">
        <description>PluginData is a set of methods which which gather all information needed by
a plugin and stores them to $this-&gt;info, an array. It also has a $this-&gt;logs,
also an array, which can be populated with information to be output to the
admin panel or a file, etc and can be used to enforce minimum PHP and
WordPress versions.</description>
        <long-description>Most methods are declared protected and meant to be called from an inheriting
classes methods.

You class's methods would accept "&amp;$args", either as it's only argument or it's
last argument, acting as a sort of "splat argument" with named parameters.

There will also be a $this-&gt;args array property in your object that mirrors
the most recently received arguments and any other related data.

The $args sent to a method, if found to be an array, can have it's key/value
merged into the $this-&gt;args. If it's a single value it's assigned a key.
Since $args is passed by reference it's updated and syncronized with
$this-&gt;args meaning caller can use the modified variable in a follow-up
method call to provide a sort of context. If the argument is not supplied,
values from $this-args is used instead.</long-description>
        <tag name="package" line="33" description="JeffPack"/>
        <tag name="inherited_from" description="\PersistArgs" refers="\PersistArgs" link="/classes/PersistArgs.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="" line="38" package="JeffPack">
        <name>$info</name>
        <full_name>\PluginData::info</full_name>
        <default>array()</default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="38" description="&lt;p&gt;holding plugin, WordPress, PHP and server data&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="41" package="JeffPack">
        <name>$logs</name>
        <full_name>\PluginData::logs</full_name>
        <default>array()</default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;to be populated with log info for output to the admin panel, file, etc.&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="39" package="JeffPack">
        <name>$args</name>
        <full_name>\PersistArgs::args</full_name>
        <default>array()</default>
        <docblock line="39">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="39" description="&lt;p&gt;olds whatever variables are needed between calls&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="55" package="JeffPack">
        <name>__construct</name>
        <full_name>\PluginData::__construct()</full_name>
        <docblock line="55">
          <description>Calls enforceVersions() and setInfo().</description>
          <long-description></long-description>
          <tag name="param" line="55" description="&lt;p&gt;sets $this-&gt;['min_php'] or '4.4.0' if not provided&lt;/p&gt;" type="string" variable="$min_php">
            <type>string</type>
          </tag>
          <tag name="param" line="55" description="&lt;p&gt;sets $this-&gt;['min_wp'] or '5.3.0' if not provided&lt;/p&gt;" type="string" variable="$min_wp">
            <type>string</type>
          </tag>
          <tag name="param" line="55" description="&lt;p&gt;should be &lt;strong&gt;FILE&lt;/strong&gt; from main php file and&#10;is determined via debug_backtrace()[0]['file'] if not provided. It is used&#10;to set $this-&gt;info['plugin_file']&lt;/p&gt;" type="string" variable="$plugin_file">
            <type>string</type>
          </tag>
          <tag name="access" line="55" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$min_php</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$min_wp</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$plugin_file</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="79" package="JeffPack">
        <name>enforceVersions</name>
        <full_name>\PluginData::enforceVersions()</full_name>
        <docblock line="79">
          <description>Calls wp_die if minimum WordPress or PHP version are not met.</description>
          <long-description></long-description>
          <tag name="param" line="79" description="&lt;p&gt;resets $this-&gt;['min_php'] only if provided&lt;/p&gt;" type="string" variable="$min_php">
            <type>string</type>
          </tag>
          <tag name="param" line="79" description="&lt;p&gt;resets $this-&gt;['min_wp'] only if provided&lt;/p&gt;" type="string" variable="$min_wp">
            <type>string</type>
          </tag>
          <tag name="param" line="79" description="&lt;p&gt;resets $this-&gt;['plugin_file'] only if provided&lt;/p&gt;" type="string" variable="$plugin_file">
            <type>string</type>
          </tag>
          <tag name="access" line="79" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$min_php</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$min_wp</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$plugin_file</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="122" package="JeffPack">
        <name>setInfo</name>
        <full_name>\PluginData::setInfo()</full_name>
        <docblock line="122">
          <description>Sets a miriad of keys on $this-&gt;info - 'plugin_name', 'plugin_uri',
'plugin_version', 'plugin_description', 'plugin_author',
'plugin_author_uri', 'plugin_text_domain', 'plugin_domain_path',
'plugin_network', 'plugin_title', 'plugin_author_name',
'plugin_author_name', 'plugin_basename', 'plugin_path',
'plugin_slug', 'plugin_prefix', 'plugin_url', 'server_ip',
and, if provided as arguments, 'min_php', 'min_wp' and 'plugin_file'</description>
          <long-description></long-description>
          <tag name="param" line="122" description="&lt;p&gt;resets $this-&gt;['min_php'] only if provided&lt;/p&gt;" type="string" variable="$min_php">
            <type>string</type>
          </tag>
          <tag name="param" line="122" description="&lt;p&gt;resets $this-&gt;['min_wp'] only if provided&lt;/p&gt;" type="string" variable="$min_wp">
            <type>string</type>
          </tag>
          <tag name="param" line="122" description="&lt;p&gt;resets $this-&gt;['plugin_file'] only if provided&lt;/p&gt;" type="string" variable="$plugin_file">
            <type>string</type>
          </tag>
          <tag name="access" line="122" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$min_php</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$min_wp</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$plugin_file</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="157" package="JeffPack">
        <name>getServerIP</name>
        <full_name>\PluginData::getServerIP()</full_name>
        <docblock line="157">
          <description>returns the numeric IP (as string) from which the WordPress  site
is being served. This is helpful in differing behavior when on localhost.</description>
          <long-description></long-description>
          <tag name="access" line="157" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="184" package="JeffPack">
        <name>viewGLOBALS</name>
        <full_name>\PluginData::viewGLOBALS()</full_name>
        <docblock line="184">
          <description>returns a large string displaying the contents of the $GLOBALS
array</description>
          <long-description></long-description>
          <tag name="return" line="184" description="representing contents of the $GLOBALS array" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="184" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="214" package="JeffPack">
        <name>writeLogs</name>
        <full_name>\PluginData::writeLogs()</full_name>
        <docblock line="214">
          <description>Saves viewGLOBALS to $this-&gt;logs['GLOBALS']</description>
          <long-description></long-description>
          <tag name="return" line="214" description="representing contents of the $GLOBALS array" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="214" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="59" package="JeffPack">
        <name>getArg</name>
        <full_name>\PersistArgs::getArg()</full_name>
        <docblock line="59">
          <description>Get a single value from $args or $this-&gt;args without writing to either.</description>
          <long-description>If $args is an array, the $key is looked up and the value is returned.
If $args is a single value, that value is returned.
If $args is null or the key does not exist, $this-&gt;args[$key] is returned
without first checking if the key exists.

An error will be thrown if the $key is not found or therefore this method is
useful if you need to halt things when the value can't be found.</long-description>
          <tag name="param" line="59" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="59" description="&lt;p&gt;is existing or hypothetical array key&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="59" description="$args[$key], $this-&gt;args[$key], or just $args" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="59" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="95" package="JeffPack">
        <name>getPassedArg</name>
        <full_name>\PersistArgs::getPassedArg()</full_name>
        <docblock line="95">
          <description>Get a single value from $args only (not checking $this-&gt;args) and without
writing to either.</description>
          <long-description>This method is useful when you create a method which needs a value to be
set in that call without falling back on data from a previous call.

If $args is an array, the $key is looked up and the value is returned.
If $args is a single value, that value is returned.
If $args is null or the key does not exist, null or some other value is
return, which can be set by the optional third argument.</long-description>
          <tag name="param" line="95" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="95" description="&lt;p&gt;is existing or hypothetical array key&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="95" description="&lt;p&gt;(optional) return if value can't be found (defaults to null)&lt;/p&gt;" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="95" description="$args[$key] or $defaults" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="95" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="132" package="JeffPack">
        <name>toArrayAsKey</name>
        <full_name>\PersistArgs::toArrayAsKey()</full_name>
        <docblock line="132">
          <description>This static method is useful for intializing an array from an unknown
variable. It does not modify the object or it's arguments and is use
only for it's return usually to assign to an array variable.</description>
          <long-description>A new array is returned from the contents of $args which
could be an array itself, a single value or null. The second argument
defines a key to be created if a value not associated with a string
key is found. The return is always an array.

If $args is null an empty array is return and $key is not used.
If $args is not an array and not null, that value is added to a new
array at $key and the array is return.
If $args is an array lacking $key but has a value at $args[0],
that value is moved to $args[$key] and $args[0] is deleted.
If $args is an array but there is no $args[0], it's returned as is.</long-description>
          <tag name="param" line="132" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="132" description="&lt;p&gt;is a hypothetical array key, usually a string&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="132" description="a new array or a copy of $args if it it an array." type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="132" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="169" package="JeffPack">
        <name>getArgAndSync</name>
        <full_name>\PersistArgs::getArgAndSync()</full_name>
        <docblock line="169">
          <description>This method gets a desired value from either the $args parameter or
$this-&gt;args and synchronizes them as a side effect.</description>
          <long-description>This method modifies both $this-&gt;args and $args to mirror each other
and return a desired value from either of them or a default value if
not found (defaults to null). $key must be provided to determine which
element is to be returned

If $args anything not an array but not null, it's assigned to both
$args at $key and returned.

If $args is an array it's merged in both directions with $this-&gt;args
overriding any matching keys found in $this-&gt;args. If $key is found
in either, it's value is returned, or else $default is returned.</long-description>
          <tag name="param" line="169" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="169" description="&lt;p&gt;is a hypothetical array key, usually a string&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="169" description="&lt;p&gt;(optional) return if value can't be found (defaults to null)&lt;/p&gt;" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="169" description="the value finally residing in args[$key] or $default" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="169" description="protected"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="221" package="JeffPack">
        <name>mergeArgs</name>
        <full_name>\PersistArgs::mergeArgs()</full_name>
        <docblock line="221">
          <description>This method updates $this-&gt;args from the argument values and returns
it even if no change occured. It does not modify either argument so
if you'd like to synchronize them you should use this method's return
to re-assign the local variable(s) you passed in. There are three modes
you can use this method depending on the type and presence of the
second argument.</description>
          <long-description>SIMPLE MERGE MODE:

If $arg1 or $arg2 is provided as an array and the other is null,
it is merged into $this-&gt;args overriding any matching keys in
$this-&gt;args.

KEY MODE:

When you are uncertain that the first argument is an array you should
provide a key as the second argument which will be used to assign
the value of $arg1 to $this-&gt;args.

If $arg1 is non-null and not an array it will be added to $this-&gt;args
at using $arg2 as a key or or pushed to the end of the $this-&gt;args
at a new int index if $arg2 is not usable as a key.

TWO ARRAY MERGE MODE:

When you are certain $arg1 is either an array or null you can either leave
off the second argument or provide a second array where both will be merged
into $this-args.

If both arguments are provided and are arrays they are combined,
with $arg2 overriding any matching keys in $arg1, then this is merged
into $this-&gt;args overriding any matching keys in $this-&gt;args.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;expected to be array or non-null value&lt;/p&gt;" type="mixed" variable="$arg1">
            <type>mixed</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;expected to be array or key (but optional)&lt;/p&gt;" type="mixed" variable="$arg2">
            <type>mixed</type>
          </tag>
          <tag name="return" line="221" description="$this-&gt;args" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="221" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$arg1</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$arg2</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="25" package="JeffPack">
        <name>bool2str</name>
        <full_name>\HelperModule::bool2str()</full_name>
        <docblock line="25">
          <description>This static method for displaying booleans as strings</description>
          <long-description></long-description>
          <tag name="param" line="25" description="&lt;p&gt;a boolean variable&lt;/p&gt;" type="boolean" variable="$boolean">
            <type>boolean</type>
          </tag>
          <tag name="return" line="25" description="either 'true' or 'false'" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="25" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$boolean</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="35" package="JeffPack">
        <name>octal2str</name>
        <full_name>\HelperModule::octal2str()</full_name>
        <docblock line="35">
          <description>This static method for displaying octal number without converting</description>
          <long-description></long-description>
          <tag name="param" line="35" description="&lt;p&gt;an octal number&lt;/p&gt;" type="integer" variable="$octal_num">
            <type>integer</type>
          </tag>
          <tag name="return" line="35" description="representing decimal number" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="35" description="public&#10;example"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$octal_num</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="44" package="JeffPack">
        <name>strAfterBslash</name>
        <full_name>\HelperModule::strAfterBslash()</full_name>
        <docblock line="44">
          <description>This static method to get string after final backslash (/)</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;typically a local path or uri&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="return" line="44" description="portion after final backslash (/)" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="44" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="53" package="JeffPack">
        <name>arrayToString</name>
        <full_name>\HelperModule::arrayToString()</full_name>
        <docblock line="53">
          <description>This static method that captures var_dump of array as string, trims the fat and returns string</description>
          <long-description></long-description>
          <tag name="param" line="53" description="" type="array" variable="$array">
            <type>array</type>
          </tag>
          <tag name="return" line="53" description="representing array" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="53" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="80" package="JeffPack">
        <name>toSnakeCase</name>
        <full_name>\HelperModule::toSnakeCase()</full_name>
        <docblock line="80">
          <description>This static method converts a string (path or file) to a snake_case string
by
1. removing ".php"
2. replacing  spaces, dashes dots and backslashes with underscores
3. removing all other non-alphanumeric other than 'underscores
4. converting to all apha characters to lower-case
5. if the first character(s) is a number it's removed</description>
          <long-description></long-description>
          <tag name="param" line="80" description="&lt;p&gt;example: &quot;dir/my-plugin.php&quot;&lt;/p&gt;" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="80" description="&quot;dir/my-plugin.php&quot; would return: &quot;dir_my_plugin&quot;" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="80" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="98" package="JeffPack">
        <name>isClosure</name>
        <full_name>\HelperModule::isClosure()</full_name>
        <docblock line="98">
          <description>This static method determines if argument is an Closure object</description>
          <long-description></long-description>
          <tag name="param" line="98" description="&lt;p&gt;of any type&lt;/p&gt;" type="mixed" variable="$var">
            <type>mixed</type>
          </tag>
          <tag name="return" line="98" description="true if $var is a Closure object" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="98" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$var</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="111" package="JeffPack">
        <name>wpHomePath</name>
        <full_name>\HelperModule::wpHomePath()</full_name>
        <docblock line="111">
          <description>This static method take no arguments and
returns full path of WordPress home path.</description>
          <long-description>Use when get_home_path() might not be available.
MUST be called from somewhere inside /wp-content</long-description>
          <tag name="return" line="111" description="home path of WordPress installation" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="111" description="public"/>
        </docblock>
        <inherited_from>\HelperModule</inherited_from>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="php_classes/HelperModule.php" generated-path="php_classes.HelperModule.html" hash="dc019fbf22236ea99fbe1880e06c9f7a" package="JeffPack\General PHP Classes">
    <docblock line="0">
      <description>HelperModule is a collection of static methods mostly for general php useages</description>
      <long-description></long-description>
      <tag name="package" line="0" description="JeffPack"/>
      <tag name="subpackage" line="0" description="General PHP Classes"/>
      <tag name="access" line="0" description="public"/>
      <tag name="author" line="0" description="Jeff Russ"/>
      <tag name="copyright" line="0" description="2016 Jeff Russ"/>
      <tag name="license" line="0" description="GPL-2.0"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="16" package="JeffPack">
      <extends/>
      <name>HelperModule</name>
      <full_name>\HelperModule</full_name>
      <docblock line="16">
        <description>The HelperModule class is a collection of static methods mostly for general php useages</description>
        <long-description></long-description>
        <tag name="package" line="16" description="JeffPack"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="25" package="JeffPack">
        <name>bool2str</name>
        <full_name>\HelperModule::bool2str()</full_name>
        <docblock line="25">
          <description>This static method for displaying booleans as strings</description>
          <long-description></long-description>
          <tag name="param" line="25" description="&lt;p&gt;a boolean variable&lt;/p&gt;" type="boolean" variable="$boolean">
            <type>boolean</type>
          </tag>
          <tag name="return" line="25" description="either 'true' or 'false'" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="25" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$boolean</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="35" package="JeffPack">
        <name>octal2str</name>
        <full_name>\HelperModule::octal2str()</full_name>
        <docblock line="35">
          <description>This static method for displaying octal number without converting</description>
          <long-description></long-description>
          <tag name="param" line="35" description="&lt;p&gt;an octal number&lt;/p&gt;" type="integer" variable="$octal_num">
            <type>integer</type>
          </tag>
          <tag name="return" line="35" description="representing decimal number" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="35" description="public&#10;example"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$octal_num</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="44" package="JeffPack">
        <name>strAfterBslash</name>
        <full_name>\HelperModule::strAfterBslash()</full_name>
        <docblock line="44">
          <description>This static method to get string after final backslash (/)</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;typically a local path or uri&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="return" line="44" description="portion after final backslash (/)" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="44" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="53" package="JeffPack">
        <name>arrayToString</name>
        <full_name>\HelperModule::arrayToString()</full_name>
        <docblock line="53">
          <description>This static method that captures var_dump of array as string, trims the fat and returns string</description>
          <long-description></long-description>
          <tag name="param" line="53" description="" type="array" variable="$array">
            <type>array</type>
          </tag>
          <tag name="return" line="53" description="representing array" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="53" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="80" package="JeffPack">
        <name>toSnakeCase</name>
        <full_name>\HelperModule::toSnakeCase()</full_name>
        <docblock line="80">
          <description>This static method converts a string (path or file) to a snake_case string
by
1. removing ".php"
2. replacing  spaces, dashes dots and backslashes with underscores
3. removing all other non-alphanumeric other than 'underscores
4. converting to all apha characters to lower-case
5. if the first character(s) is a number it's removed</description>
          <long-description></long-description>
          <tag name="param" line="80" description="&lt;p&gt;example: &quot;dir/my-plugin.php&quot;&lt;/p&gt;" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="80" description="&quot;dir/my-plugin.php&quot; would return: &quot;dir_my_plugin&quot;" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="80" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="98" package="JeffPack">
        <name>isClosure</name>
        <full_name>\HelperModule::isClosure()</full_name>
        <docblock line="98">
          <description>This static method determines if argument is an Closure object</description>
          <long-description></long-description>
          <tag name="param" line="98" description="&lt;p&gt;of any type&lt;/p&gt;" type="mixed" variable="$var">
            <type>mixed</type>
          </tag>
          <tag name="return" line="98" description="true if $var is a Closure object" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="98" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$var</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="111" package="JeffPack">
        <name>wpHomePath</name>
        <full_name>\HelperModule::wpHomePath()</full_name>
        <docblock line="111">
          <description>This static method take no arguments and
returns full path of WordPress home path.</description>
          <long-description>Use when get_home_path() might not be available.
MUST be called from somewhere inside /wp-content</long-description>
          <tag name="return" line="111" description="home path of WordPress installation" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="111" description="public"/>
        </docblock>
      </method>
    </class>
    <source>eJylVvtv2zYQ/tn5K26eV0mZH0nWDViTvlZs7YYWMNYWBdZ2Ai1RNluKFEgqjhfsf98dSfkZpA0WJI58vPvu7ruHePG4WTRHk+PjIziGF1w23LzSZSs5CAsMCi0lL5zQCnQF1jEnCqi5W+jSQq2tkyuotIE5V9wwCQgGreVszi0B0t+ThhWfUQD08wevqil+9we2na3PnkeA6YspPJPM2gDwhBUFt9bbQtPOpCiCuMUQDKwx4c/WBoNCNysj5guHJ2cnpz/tHSMAVzYE83z6cnQ2PkH55EhUkMI3UJDrnF8J62yabPORZBlcH/WIqR4CvVnwXbq85f8nrUfB9ALYDv41HB31gvseuUdPO8gesRS2kWwl1BxmWkvOFMZDigZFliy9NZbEsBo6HRh0D2wtumRGsJnkQd9w1xoVcYALt+AGEmdangC6TSomLU+CbqxYLBaKMJ9eDDUIoWpVoIe8nSEqpF0ISDJEb+uoHneuHnSezuHfu7GhC4dEq7aeYeBLjF+3DuukLrlxeH7AjFCOz1F14A1zNAQMZBvlJmIw8sZwyxVhQskLUe/pH5AD/IrVTeD5FqK858jUOqQtrmyDAbgq7X93cl/3h1txZ1/mymlsRdclwSqHiVdCYegzHE+LvbiAdJIdkNRlPYgPbtWIgknsbgZSF9TZzC2oQVojbuSr0cand6vPu7UUQj8ltF8iRgwOuYq+mTFslTe6SflVI3XJ02SSDLsksq/ha8GweViDcNzSpORlWzc06x57M3FDwH+1RQMOFdowVcaCdRoHnAYE5DQ8fLnLvN7dafJmb/TrAJkGd0Q37rheT89ytDMuzc7pa5dip+aFA4yhlQ4eAmpj/+QFDWu0GJRccofsPAyeUhL2ksmFeJSOjx9nFx8m4hHSHsVwYXFS5PosfNucB/lsfR6fPqiosh8R8jPPkSbJCp52sQwhoToHpWDRbZogOye6v1T8uDRoz8d6pF2XV0LyjKYJjxT7zPOC4ZtmU2iYhUKdjrGEtb4k4/4Yt3/fi89ITCH7Ilt8NVLMJXYx8lhqcon9sx4PFNIig1aV3NhCUy96nB+24JFG0H5bK61GTDYLhjuBG8wniLGXFSQHGPfHW9vRp4RADK2hWGCjFjhglsRSL7kZUZ7e7Mcx4IvUt7sw1m2UU5uFd2NcwcIlNkTJy1v3SrcfH0C/FGZSr0aNbOdCbWjbn44b9GCpW9mNXkDKa9wBXqN/9+Fx+jXV9xmmnYYoM+hGx3/d68A+NvD32QeKZTDB7dwfnPbDxomNO2NlKbamJQHs1GREH2P6mCRRMYDj56a7oy1q5ckO6I2BvP/76egvNvrnZPRz/pFiSaIR7Htw2hc33SAuF9jgeE0SNo9N5A/fn3zE/DPoTNsZPviTIZzuzhnKzr9ixkocV1MLhYwIWqpz9KacbyCFt0NtcfHi1vmEl6yD5qnFFS9pgeLS8itZrejFtHuR6W4WdK0gF17Z9+ch+t1aQ9iIkBKmvzKu00feAmw8u3cP0uBZIZoqOIYbrbOvoclhD+JcrwkKC8Jrd2+ZqpXdW7iCd9qUU0OpLHTNvXjstd/imlouuKJrQE5nOZ2lGZJJF2mlHcw4sEsmJN0Jg9Grt6/fkJje+Mh4ZXQNFm0RCPnDlETJYbJsRrhIHEa3qdTewK6D2Y3RkyIlI1rvXodl8wJhpyGNa/gWPrW4j6RAxvaT9JG/m24VKrYw5Plvv7/8Nc+HcDKkcBtt042sv8mtn0GsGP5i2f4D+bMqhw==</source>
  </file>
  <file path="WpPlugin.php" generated-path="WpPlugin.html" hash="942f400d13fbcfd10c4849bb5a12069e" package="JeffPack\WordPress Classes">
    <docblock line="0">
      <description>Include this file and gain access to everything you need for a plugin via the
WpPlugin class, which extends SettingsHelper, PluginData, PersistArgs
and HelperModule</description>
      <long-description></long-description>
      <tag name="package" line="0" description="JeffPack"/>
      <tag name="subpackage" line="0" description="WordPress Classes"/>
      <tag name="author" line="0" description="Jeff Russ"/>
      <tag name="copyright" line="0" description="2016 Jeff Russ"/>
      <tag name="license" line="0" description="GPL-2.0"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="30" package="JeffPack">
      <extends>\SettingsHelper</extends>
      <name>WpPlugin</name>
      <full_name>\WpPlugin</full_name>
      <docblock line="30">
        <description>WpPlugin class serves as a base for creating WordPress Plugins.</description>
        <long-description>Include this file and gain access to everything you need for a plugin via the
WpPlugin class, which extends SettingsHelper, PluginData, PersistArgs
and HelperModule</long-description>
        <tag name="package" line="30" description="JeffPack"/>
        <tag name="inherited_from" description="\SettingsHelper" refers="\SettingsHelper" link="/classes/SettingsHelper.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="" line="38" package="JeffPack">
        <name>$info</name>
        <full_name>\PluginData::info</full_name>
        <default>array()</default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="38" description="&lt;p&gt;holding plugin, WordPress, PHP and server data&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="41" package="JeffPack">
        <name>$logs</name>
        <full_name>\PluginData::logs</full_name>
        <default>array()</default>
        <docblock line="41">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="41" description="&lt;p&gt;to be populated with log info for output to the admin panel, file, etc.&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="39" package="JeffPack">
        <name>$args</name>
        <full_name>\PersistArgs::args</full_name>
        <default>array()</default>
        <docblock line="39">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="39" description="&lt;p&gt;olds whatever variables are needed between calls&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="61" package="JeffPack">
        <name>addSettingsPage</name>
        <full_name>\SettingsHelper::addSettingsPage()</full_name>
        <docblock line="61">
          <description>Calls add_menu_page(), add_options_page(), or add_submenu_page() with a built in
Closure that calls settings_fields(), do_settings_sections() submit_button()</description>
          <long-description></long-description>
          <tag name="param" line="61" description="&lt;p&gt;&quot;menu&quot; calls add_menu_page,&#10;&quot;options&quot; calls add_options_page anything else calls add_submenu_page&#10;and is passed as first arg&lt;/p&gt;" type="string" variable="$menu_location">
            <type>string</type>
          </tag>
          <tag name="param" line="61" description="&lt;p&gt;first arg sent to&#10;add_options_page/add_submenu_page or second arg send to add_submenu_page&lt;/p&gt;" type="string" variable="$page_title">
            <type>string</type>
          </tag>
          <tag name="param" line="61" description="&lt;p&gt;second arg sent to&#10;add_options_page/add_submenu_page or third arg send to add_submenu_page&lt;/p&gt;" type="string" variable="$menu_title">
            <type>string</type>
          </tag>
          <tag name="param" line="61" description="&lt;p&gt;can have 'icon_url' or 'position' elements added&#10;and after call will have page and default section info added.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="61" description="returns reference to object to enable method call chaining" type="\WpPlugin">
            <type>\WpPlugin</type>
          </tag>
          <tag name="access" line="61" description="public"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$menu_location</name>
          <default>"menu"</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$page_title</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$menu_title</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$args</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\SettingsHelper</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="173" package="JeffPack">
        <name>addSettingsSection</name>
        <full_name>\SettingsHelper::addSettingsSection()</full_name>
        <docblock line="173">
          <description>Calls add_action("admin_init",function(){add_settings_section(.</description>
          <long-description>..function(){...});</long-description>
          <tag name="param" line="173" description="&lt;p&gt;(optional, defaulting to '')&lt;/p&gt;" type="string" variable="$section_title">
            <type>string</type>
          </tag>
          <tag name="param" line="173" description="&lt;p&gt;if provided should have 'page_slug'. after call it will have&#10;section info added.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="173" description="returns reference to object to enable method call chaining" type="\WpPlugin">
            <type>\WpPlugin</type>
          </tag>
          <tag name="access" line="173" description="public"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$section_title</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$args</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\SettingsHelper</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="226" package="JeffPack">
        <name>addSetting</name>
        <full_name>\SettingsHelper::addSetting()</full_name>
        <docblock line="226">
          <description>Calls add_action("admin_init",function(){add_settings_section(.</description>
          <long-description>..function(){...});</long-description>
          <tag name="param" line="226" description="" type="string" variable="$setting_label">
            <type>string</type>
          </tag>
          <tag name="param" line="226" description="&lt;p&gt;is the default value the setting should have&lt;/p&gt;" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="param" line="226" description="&lt;p&gt;if provided should be a string of html or a callback.&#10;If not provided, a text field will be created.&#10;If you provide a string use single quotes and embed $name and $value.&#10;If you use a callback, do function($args) { extract($args); ...}&lt;/p&gt;" type="mixed" variable="$source">
            <type>mixed</type>
          </tag>
          <tag name="param" line="226" description="&lt;p&gt;if provided should have 'page_slug' and section info.&#10;after call it will have setting info added.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="226" description="returns reference to object to enable method call chaining" type="\WpPlugin">
            <type>\WpPlugin</type>
          </tag>
          <tag name="access" line="226" description="public"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting_label</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>''</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default>''</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$args</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <inherited_from>\SettingsHelper</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="284" package="JeffPack">
        <name>getSetting</name>
        <full_name>\SettingsHelper::getSetting()</full_name>
        <docblock line="284">
          <description>public function getSetting($setting_id)
{
	extract( $this-&gt;info['settings'][$setting_id] );
	$options = wp_parse_args(get_option($option_name), [$setting_id =&gt; $default] );
	return $options[$setting_id];
}</description>
          <long-description></long-description>
          <tag name="param" line="284" description="" type="string" variable="$setting_id">
            <type>string</type>
          </tag>
          <tag name="return" line="284" description="returns value of setting" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="284" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$setting_id</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\SettingsHelper</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="55" package="JeffPack">
        <name>__construct</name>
        <full_name>\PluginData::__construct()</full_name>
        <docblock line="55">
          <description>Calls enforceVersions() and setInfo().</description>
          <long-description></long-description>
          <tag name="param" line="55" description="&lt;p&gt;sets $this-&gt;['min_php'] or '4.4.0' if not provided&lt;/p&gt;" type="string" variable="$min_php">
            <type>string</type>
          </tag>
          <tag name="param" line="55" description="&lt;p&gt;sets $this-&gt;['min_wp'] or '5.3.0' if not provided&lt;/p&gt;" type="string" variable="$min_wp">
            <type>string</type>
          </tag>
          <tag name="param" line="55" description="&lt;p&gt;should be &lt;strong&gt;FILE&lt;/strong&gt; from main php file and&#10;is determined via debug_backtrace()[0]['file'] if not provided. It is used&#10;to set $this-&gt;info['plugin_file']&lt;/p&gt;" type="string" variable="$plugin_file">
            <type>string</type>
          </tag>
          <tag name="access" line="55" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$min_php</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$min_wp</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$plugin_file</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\PluginData</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="79" package="JeffPack">
        <name>enforceVersions</name>
        <full_name>\PluginData::enforceVersions()</full_name>
        <docblock line="79">
          <description>Calls wp_die if minimum WordPress or PHP version are not met.</description>
          <long-description></long-description>
          <tag name="param" line="79" description="&lt;p&gt;resets $this-&gt;['min_php'] only if provided&lt;/p&gt;" type="string" variable="$min_php">
            <type>string</type>
          </tag>
          <tag name="param" line="79" description="&lt;p&gt;resets $this-&gt;['min_wp'] only if provided&lt;/p&gt;" type="string" variable="$min_wp">
            <type>string</type>
          </tag>
          <tag name="param" line="79" description="&lt;p&gt;resets $this-&gt;['plugin_file'] only if provided&lt;/p&gt;" type="string" variable="$plugin_file">
            <type>string</type>
          </tag>
          <tag name="access" line="79" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$min_php</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$min_wp</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$plugin_file</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\PluginData</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="122" package="JeffPack">
        <name>setInfo</name>
        <full_name>\PluginData::setInfo()</full_name>
        <docblock line="122">
          <description>Sets a miriad of keys on $this-&gt;info - 'plugin_name', 'plugin_uri',
'plugin_version', 'plugin_description', 'plugin_author',
'plugin_author_uri', 'plugin_text_domain', 'plugin_domain_path',
'plugin_network', 'plugin_title', 'plugin_author_name',
'plugin_author_name', 'plugin_basename', 'plugin_path',
'plugin_slug', 'plugin_prefix', 'plugin_url', 'server_ip',
and, if provided as arguments, 'min_php', 'min_wp' and 'plugin_file'</description>
          <long-description></long-description>
          <tag name="param" line="122" description="&lt;p&gt;resets $this-&gt;['min_php'] only if provided&lt;/p&gt;" type="string" variable="$min_php">
            <type>string</type>
          </tag>
          <tag name="param" line="122" description="&lt;p&gt;resets $this-&gt;['min_wp'] only if provided&lt;/p&gt;" type="string" variable="$min_wp">
            <type>string</type>
          </tag>
          <tag name="param" line="122" description="&lt;p&gt;resets $this-&gt;['plugin_file'] only if provided&lt;/p&gt;" type="string" variable="$plugin_file">
            <type>string</type>
          </tag>
          <tag name="access" line="122" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$min_php</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$min_wp</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$plugin_file</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\PluginData</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="157" package="JeffPack">
        <name>getServerIP</name>
        <full_name>\PluginData::getServerIP()</full_name>
        <docblock line="157">
          <description>returns the numeric IP (as string) from which the WordPress  site
is being served. This is helpful in differing behavior when on localhost.</description>
          <long-description></long-description>
          <tag name="access" line="157" description="public"/>
        </docblock>
        <inherited_from>\PluginData</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="184" package="JeffPack">
        <name>viewGLOBALS</name>
        <full_name>\PluginData::viewGLOBALS()</full_name>
        <docblock line="184">
          <description>returns a large string displaying the contents of the $GLOBALS
array</description>
          <long-description></long-description>
          <tag name="return" line="184" description="representing contents of the $GLOBALS array" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="184" description="public"/>
        </docblock>
        <inherited_from>\PluginData</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="214" package="JeffPack">
        <name>writeLogs</name>
        <full_name>\PluginData::writeLogs()</full_name>
        <docblock line="214">
          <description>Saves viewGLOBALS to $this-&gt;logs['GLOBALS']</description>
          <long-description></long-description>
          <tag name="return" line="214" description="representing contents of the $GLOBALS array" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="214" description="public"/>
        </docblock>
        <inherited_from>\PluginData</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="59" package="JeffPack">
        <name>getArg</name>
        <full_name>\PersistArgs::getArg()</full_name>
        <docblock line="59">
          <description>Get a single value from $args or $this-&gt;args without writing to either.</description>
          <long-description>If $args is an array, the $key is looked up and the value is returned.
If $args is a single value, that value is returned.
If $args is null or the key does not exist, $this-&gt;args[$key] is returned
without first checking if the key exists.

An error will be thrown if the $key is not found or therefore this method is
useful if you need to halt things when the value can't be found.</long-description>
          <tag name="param" line="59" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="59" description="&lt;p&gt;is existing or hypothetical array key&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="59" description="$args[$key], $this-&gt;args[$key], or just $args" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="59" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="95" package="JeffPack">
        <name>getPassedArg</name>
        <full_name>\PersistArgs::getPassedArg()</full_name>
        <docblock line="95">
          <description>Get a single value from $args only (not checking $this-&gt;args) and without
writing to either.</description>
          <long-description>This method is useful when you create a method which needs a value to be
set in that call without falling back on data from a previous call.

If $args is an array, the $key is looked up and the value is returned.
If $args is a single value, that value is returned.
If $args is null or the key does not exist, null or some other value is
return, which can be set by the optional third argument.</long-description>
          <tag name="param" line="95" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="95" description="&lt;p&gt;is existing or hypothetical array key&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="95" description="&lt;p&gt;(optional) return if value can't be found (defaults to null)&lt;/p&gt;" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="95" description="$args[$key] or $defaults" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="95" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="132" package="JeffPack">
        <name>toArrayAsKey</name>
        <full_name>\PersistArgs::toArrayAsKey()</full_name>
        <docblock line="132">
          <description>This static method is useful for intializing an array from an unknown
variable. It does not modify the object or it's arguments and is use
only for it's return usually to assign to an array variable.</description>
          <long-description>A new array is returned from the contents of $args which
could be an array itself, a single value or null. The second argument
defines a key to be created if a value not associated with a string
key is found. The return is always an array.

If $args is null an empty array is return and $key is not used.
If $args is not an array and not null, that value is added to a new
array at $key and the array is return.
If $args is an array lacking $key but has a value at $args[0],
that value is moved to $args[$key] and $args[0] is deleted.
If $args is an array but there is no $args[0], it's returned as is.</long-description>
          <tag name="param" line="132" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="132" description="&lt;p&gt;is a hypothetical array key, usually a string&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="132" description="a new array or a copy of $args if it it an array." type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="132" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="169" package="JeffPack">
        <name>getArgAndSync</name>
        <full_name>\PersistArgs::getArgAndSync()</full_name>
        <docblock line="169">
          <description>This method gets a desired value from either the $args parameter or
$this-&gt;args and synchronizes them as a side effect.</description>
          <long-description>This method modifies both $this-&gt;args and $args to mirror each other
and return a desired value from either of them or a default value if
not found (defaults to null). $key must be provided to determine which
element is to be returned

If $args anything not an array but not null, it's assigned to both
$args at $key and returned.

If $args is an array it's merged in both directions with $this-&gt;args
overriding any matching keys found in $this-&gt;args. If $key is found
in either, it's value is returned, or else $default is returned.</long-description>
          <tag name="param" line="169" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="169" description="&lt;p&gt;is a hypothetical array key, usually a string&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="169" description="&lt;p&gt;(optional) return if value can't be found (defaults to null)&lt;/p&gt;" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="169" description="the value finally residing in args[$key] or $default" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="169" description="protected"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="221" package="JeffPack">
        <name>mergeArgs</name>
        <full_name>\PersistArgs::mergeArgs()</full_name>
        <docblock line="221">
          <description>This method updates $this-&gt;args from the argument values and returns
it even if no change occured. It does not modify either argument so
if you'd like to synchronize them you should use this method's return
to re-assign the local variable(s) you passed in. There are three modes
you can use this method depending on the type and presence of the
second argument.</description>
          <long-description>SIMPLE MERGE MODE:

If $arg1 or $arg2 is provided as an array and the other is null,
it is merged into $this-&gt;args overriding any matching keys in
$this-&gt;args.

KEY MODE:

When you are uncertain that the first argument is an array you should
provide a key as the second argument which will be used to assign
the value of $arg1 to $this-&gt;args.

If $arg1 is non-null and not an array it will be added to $this-&gt;args
at using $arg2 as a key or or pushed to the end of the $this-&gt;args
at a new int index if $arg2 is not usable as a key.

TWO ARRAY MERGE MODE:

When you are certain $arg1 is either an array or null you can either leave
off the second argument or provide a second array where both will be merged
into $this-args.

If both arguments are provided and are arrays they are combined,
with $arg2 overriding any matching keys in $arg1, then this is merged
into $this-&gt;args overriding any matching keys in $this-&gt;args.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;expected to be array or non-null value&lt;/p&gt;" type="mixed" variable="$arg1">
            <type>mixed</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;expected to be array or key (but optional)&lt;/p&gt;" type="mixed" variable="$arg2">
            <type>mixed</type>
          </tag>
          <tag name="return" line="221" description="$this-&gt;args" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="221" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$arg1</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$arg2</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PersistArgs</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="25" package="JeffPack">
        <name>bool2str</name>
        <full_name>\HelperModule::bool2str()</full_name>
        <docblock line="25">
          <description>This static method for displaying booleans as strings</description>
          <long-description></long-description>
          <tag name="param" line="25" description="&lt;p&gt;a boolean variable&lt;/p&gt;" type="boolean" variable="$boolean">
            <type>boolean</type>
          </tag>
          <tag name="return" line="25" description="either 'true' or 'false'" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="25" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$boolean</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="35" package="JeffPack">
        <name>octal2str</name>
        <full_name>\HelperModule::octal2str()</full_name>
        <docblock line="35">
          <description>This static method for displaying octal number without converting</description>
          <long-description></long-description>
          <tag name="param" line="35" description="&lt;p&gt;an octal number&lt;/p&gt;" type="integer" variable="$octal_num">
            <type>integer</type>
          </tag>
          <tag name="return" line="35" description="representing decimal number" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="35" description="public&#10;example"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$octal_num</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="44" package="JeffPack">
        <name>strAfterBslash</name>
        <full_name>\HelperModule::strAfterBslash()</full_name>
        <docblock line="44">
          <description>This static method to get string after final backslash (/)</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;typically a local path or uri&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="return" line="44" description="portion after final backslash (/)" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="44" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="53" package="JeffPack">
        <name>arrayToString</name>
        <full_name>\HelperModule::arrayToString()</full_name>
        <docblock line="53">
          <description>This static method that captures var_dump of array as string, trims the fat and returns string</description>
          <long-description></long-description>
          <tag name="param" line="53" description="" type="array" variable="$array">
            <type>array</type>
          </tag>
          <tag name="return" line="53" description="representing array" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="53" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="80" package="JeffPack">
        <name>toSnakeCase</name>
        <full_name>\HelperModule::toSnakeCase()</full_name>
        <docblock line="80">
          <description>This static method converts a string (path or file) to a snake_case string
by
1. removing ".php"
2. replacing  spaces, dashes dots and backslashes with underscores
3. removing all other non-alphanumeric other than 'underscores
4. converting to all apha characters to lower-case
5. if the first character(s) is a number it's removed</description>
          <long-description></long-description>
          <tag name="param" line="80" description="&lt;p&gt;example: &quot;dir/my-plugin.php&quot;&lt;/p&gt;" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="80" description="&quot;dir/my-plugin.php&quot; would return: &quot;dir_my_plugin&quot;" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="80" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="98" package="JeffPack">
        <name>isClosure</name>
        <full_name>\HelperModule::isClosure()</full_name>
        <docblock line="98">
          <description>This static method determines if argument is an Closure object</description>
          <long-description></long-description>
          <tag name="param" line="98" description="&lt;p&gt;of any type&lt;/p&gt;" type="mixed" variable="$var">
            <type>mixed</type>
          </tag>
          <tag name="return" line="98" description="true if $var is a Closure object" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="98" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$var</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="111" package="JeffPack">
        <name>wpHomePath</name>
        <full_name>\HelperModule::wpHomePath()</full_name>
        <docblock line="111">
          <description>This static method take no arguments and
returns full path of WordPress home path.</description>
          <long-description>Use when get_home_path() might not be available.
MUST be called from somewhere inside /wp-content</long-description>
          <tag name="return" line="111" description="home path of WordPress installation" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="111" description="public"/>
        </docblock>
        <inherited_from>\HelperModule</inherited_from>
      </method>
    </class>
    <source>eJy1U01v2zAMPdu/guvFSZDGaQ69rMA2rN2WoQWC9ZCjocq0LcyTBFHOB4r+91JWmqVtgAJDZ9iCRT6RT+TjxSfb2DQfjVIYQfjmWrZdieAbRVCpFkHoEmqhNAgpkQi8AVyh2zJC17A1HWjEEirjQIBtu5qhKyU4AoaAS7uINtkKojGsGyUbwI1HXRLcovcchn5ga9GNIWIvhRf8j44U+S+upp5aIBJxN6bsWnyi/NkK+VvUCOH5iVW14H3voO5u71saVy5cuMDXQASpR4jON0x8fxR+dRQ90titU3Xj2TObnp2/cLdKoqaY8/vi+nQ2mbI9T1MVC1gYLRGYAHk3gKL4Nr++KooxTMfAFmto8Nd2sran0miuiD8ZwnCS8V6Uf5TOd8EoD52YcKuyj/8pQWzcsRQZ2woZa5Yf1v9N8EEDj2LXB9B9399CPlfMDp2qCgbwIWqswA1npUH2JL2M7wz3aRJknrySJBC6FRIIfuFOcE+DlKVDEfIc6CYeokkfo1/ed1heU/vnaUmOjUsS9JnEO+/zHA8N9w/pQ/oIrFpfbA==</source>
  </file>
  <file path="php_classes/PersistArgs.php" generated-path="php_classes.PersistArgs.html" hash="f0aaad58834708c28d79dc4efbad72ad" package="JeffPack\General PHP Classes">
    <docblock line="0">
      <description>PersistArgs is and abstract class to give your class a better way to
parse accept method arguments and persist data between calls to avoid
nested callback and reduce the number or required arguments, keeping your code DRY.</description>
      <long-description></long-description>
      <tag name="package" line="0" description="JeffPack"/>
      <tag name="subpackage" line="0" description="General PHP Classes"/>
      <tag name="access" line="0" description="public"/>
      <tag name="author" line="0" description="Jeff Russ"/>
      <tag name="copyright" line="0" description="2016 Jeff Russ"/>
      <tag name="license" line="0" description="GPL-2.0"/>
    </docblock>
    <class final="false" abstract="true" namespace="" line="36" package="JeffPack">
      <extends>\HelperModule</extends>
      <name>PersistArgs</name>
      <full_name>\PersistArgs</full_name>
      <docblock line="36">
        <description>PersistArgs is and abstract class to give your class a better way to
parse accept method arguments and persist data between calls to avoid
nested callback and reduce the number or required arguments, keeping your code DRY.</description>
        <long-description>Most methods are declared protected and meant to be called from an inheriting
classes methods.

You class's methods would accept "&amp;$args", either as it's only argument or it's
last argument, acting as a sort of "splat argument" with named parameters.

There will also be a $this-&gt;args array property in your object that mirrors
the most recently received arguments and any other related data.

The $args sent to a method, if found to be an array, can have it's key/value
merged into the $this-&gt;args. If it's a single value it's assigned a key.
Since $args is passed by reference it's updated and syncronized with
$this-&gt;args meaning caller can use the modified variable in a follow-up
method call to provide a sort of context. If the argument is not supplied,
values from $this-args is used instead.</long-description>
        <tag name="package" line="36" description="JeffPack"/>
        <tag name="inherited_from" description="\HelperModule" refers="\HelperModule" link="/classes/HelperModule.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="" line="39" package="JeffPack">
        <name>$args</name>
        <full_name>\PersistArgs::args</full_name>
        <default>array()</default>
        <docblock line="39">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="39" description="&lt;p&gt;olds whatever variables are needed between calls&lt;/p&gt;" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="59" package="JeffPack">
        <name>getArg</name>
        <full_name>\PersistArgs::getArg()</full_name>
        <docblock line="59">
          <description>Get a single value from $args or $this-&gt;args without writing to either.</description>
          <long-description>If $args is an array, the $key is looked up and the value is returned.
If $args is a single value, that value is returned.
If $args is null or the key does not exist, $this-&gt;args[$key] is returned
without first checking if the key exists.

An error will be thrown if the $key is not found or therefore this method is
useful if you need to halt things when the value can't be found.</long-description>
          <tag name="param" line="59" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="59" description="&lt;p&gt;is existing or hypothetical array key&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="59" description="$args[$key], $this-&gt;args[$key], or just $args" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="59" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="95" package="JeffPack">
        <name>getPassedArg</name>
        <full_name>\PersistArgs::getPassedArg()</full_name>
        <docblock line="95">
          <description>Get a single value from $args only (not checking $this-&gt;args) and without
writing to either.</description>
          <long-description>This method is useful when you create a method which needs a value to be
set in that call without falling back on data from a previous call.

If $args is an array, the $key is looked up and the value is returned.
If $args is a single value, that value is returned.
If $args is null or the key does not exist, null or some other value is
return, which can be set by the optional third argument.</long-description>
          <tag name="param" line="95" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="95" description="&lt;p&gt;is existing or hypothetical array key&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="95" description="&lt;p&gt;(optional) return if value can't be found (defaults to null)&lt;/p&gt;" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="95" description="$args[$key] or $defaults" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="95" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="132" package="JeffPack">
        <name>toArrayAsKey</name>
        <full_name>\PersistArgs::toArrayAsKey()</full_name>
        <docblock line="132">
          <description>This static method is useful for intializing an array from an unknown
variable. It does not modify the object or it's arguments and is use
only for it's return usually to assign to an array variable.</description>
          <long-description>A new array is returned from the contents of $args which
could be an array itself, a single value or null. The second argument
defines a key to be created if a value not associated with a string
key is found. The return is always an array.

If $args is null an empty array is return and $key is not used.
If $args is not an array and not null, that value is added to a new
array at $key and the array is return.
If $args is an array lacking $key but has a value at $args[0],
that value is moved to $args[$key] and $args[0] is deleted.
If $args is an array but there is no $args[0], it's returned as is.</long-description>
          <tag name="param" line="132" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="132" description="&lt;p&gt;is a hypothetical array key, usually a string&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="return" line="132" description="a new array or a copy of $args if it it an array." type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="132" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="169" package="JeffPack">
        <name>getArgAndSync</name>
        <full_name>\PersistArgs::getArgAndSync()</full_name>
        <docblock line="169">
          <description>This method gets a desired value from either the $args parameter or
$this-&gt;args and synchronizes them as a side effect.</description>
          <long-description>This method modifies both $this-&gt;args and $args to mirror each other
and return a desired value from either of them or a default value if
not found (defaults to null). $key must be provided to determine which
element is to be returned

If $args anything not an array but not null, it's assigned to both
$args at $key and returned.

If $args is an array it's merged in both directions with $this-&gt;args
overriding any matching keys found in $this-&gt;args. If $key is found
in either, it's value is returned, or else $default is returned.</long-description>
          <tag name="param" line="169" description="&lt;p&gt;is array or anything else&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="param" line="169" description="&lt;p&gt;is a hypothetical array key, usually a string&lt;/p&gt;" type="mixed" variable="$key">
            <type>mixed</type>
          </tag>
          <tag name="param" line="169" description="&lt;p&gt;(optional) return if value can't be found (defaults to null)&lt;/p&gt;" type="mixed" variable="$default">
            <type>mixed</type>
          </tag>
          <tag name="return" line="169" description="the value finally residing in args[$key] or $default" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="169" description="protected"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$args</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="221" package="JeffPack">
        <name>mergeArgs</name>
        <full_name>\PersistArgs::mergeArgs()</full_name>
        <docblock line="221">
          <description>This method updates $this-&gt;args from the argument values and returns
it even if no change occured. It does not modify either argument so
if you'd like to synchronize them you should use this method's return
to re-assign the local variable(s) you passed in. There are three modes
you can use this method depending on the type and presence of the
second argument.</description>
          <long-description>SIMPLE MERGE MODE:

If $arg1 or $arg2 is provided as an array and the other is null,
it is merged into $this-&gt;args overriding any matching keys in
$this-&gt;args.

KEY MODE:

When you are uncertain that the first argument is an array you should
provide a key as the second argument which will be used to assign
the value of $arg1 to $this-&gt;args.

If $arg1 is non-null and not an array it will be added to $this-&gt;args
at using $arg2 as a key or or pushed to the end of the $this-&gt;args
at a new int index if $arg2 is not usable as a key.

TWO ARRAY MERGE MODE:

When you are certain $arg1 is either an array or null you can either leave
off the second argument or provide a second array where both will be merged
into $this-args.

If both arguments are provided and are arrays they are combined,
with $arg2 overriding any matching keys in $arg1, then this is merged
into $this-&gt;args overriding any matching keys in $this-&gt;args.</long-description>
          <tag name="param" line="221" description="&lt;p&gt;expected to be array or non-null value&lt;/p&gt;" type="mixed" variable="$arg1">
            <type>mixed</type>
          </tag>
          <tag name="param" line="221" description="&lt;p&gt;expected to be array or key (but optional)&lt;/p&gt;" type="mixed" variable="$arg2">
            <type>mixed</type>
          </tag>
          <tag name="return" line="221" description="$this-&gt;args" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="221" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$arg1</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$arg2</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="25" package="JeffPack">
        <name>bool2str</name>
        <full_name>\HelperModule::bool2str()</full_name>
        <docblock line="25">
          <description>This static method for displaying booleans as strings</description>
          <long-description></long-description>
          <tag name="param" line="25" description="&lt;p&gt;a boolean variable&lt;/p&gt;" type="boolean" variable="$boolean">
            <type>boolean</type>
          </tag>
          <tag name="return" line="25" description="either 'true' or 'false'" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="25" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$boolean</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="35" package="JeffPack">
        <name>octal2str</name>
        <full_name>\HelperModule::octal2str()</full_name>
        <docblock line="35">
          <description>This static method for displaying octal number without converting</description>
          <long-description></long-description>
          <tag name="param" line="35" description="&lt;p&gt;an octal number&lt;/p&gt;" type="integer" variable="$octal_num">
            <type>integer</type>
          </tag>
          <tag name="return" line="35" description="representing decimal number" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="35" description="public&#10;example"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$octal_num</name>
          <default></default>
          <type>integer</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="44" package="JeffPack">
        <name>strAfterBslash</name>
        <full_name>\HelperModule::strAfterBslash()</full_name>
        <docblock line="44">
          <description>This static method to get string after final backslash (/)</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;typically a local path or uri&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="return" line="44" description="portion after final backslash (/)" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="44" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="53" package="JeffPack">
        <name>arrayToString</name>
        <full_name>\HelperModule::arrayToString()</full_name>
        <docblock line="53">
          <description>This static method that captures var_dump of array as string, trims the fat and returns string</description>
          <long-description></long-description>
          <tag name="param" line="53" description="" type="array" variable="$array">
            <type>array</type>
          </tag>
          <tag name="return" line="53" description="representing array" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="53" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="80" package="JeffPack">
        <name>toSnakeCase</name>
        <full_name>\HelperModule::toSnakeCase()</full_name>
        <docblock line="80">
          <description>This static method converts a string (path or file) to a snake_case string
by
1. removing ".php"
2. replacing  spaces, dashes dots and backslashes with underscores
3. removing all other non-alphanumeric other than 'underscores
4. converting to all apha characters to lower-case
5. if the first character(s) is a number it's removed</description>
          <long-description></long-description>
          <tag name="param" line="80" description="&lt;p&gt;example: &quot;dir/my-plugin.php&quot;&lt;/p&gt;" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="return" line="80" description="&quot;dir/my-plugin.php&quot; would return: &quot;dir_my_plugin&quot;" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="80" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$str</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="98" package="JeffPack">
        <name>isClosure</name>
        <full_name>\HelperModule::isClosure()</full_name>
        <docblock line="98">
          <description>This static method determines if argument is an Closure object</description>
          <long-description></long-description>
          <tag name="param" line="98" description="&lt;p&gt;of any type&lt;/p&gt;" type="mixed" variable="$var">
            <type>mixed</type>
          </tag>
          <tag name="return" line="98" description="true if $var is a Closure object" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="98" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$var</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\HelperModule</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="111" package="JeffPack">
        <name>wpHomePath</name>
        <full_name>\HelperModule::wpHomePath()</full_name>
        <docblock line="111">
          <description>This static method take no arguments and
returns full path of WordPress home path.</description>
          <long-description>Use when get_home_path() might not be available.
MUST be called from somewhere inside /wp-content</long-description>
          <tag name="return" line="111" description="home path of WordPress installation" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="111" description="public"/>
        </docblock>
        <inherited_from>\HelperModule</inherited_from>
      </method>
    </class>
    <source>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</source>
  </file>
  <package name="JeffPack" full_name="JeffPack">
    <package name="General PHP Classes" full_name="JeffPack\General PHP Classes"/>
    <package name="WordPress Classes" full_name="JeffPack\WordPress Classes"/>
  </package>
  <package name="Search" full_name="Search"/>
  <package name="global" full_name="global"/>
  <namespace name="global" full_name="global"/>
  <deprecated count="0"/>
</project>
